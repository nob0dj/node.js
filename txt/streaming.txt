## streaming
[Streaming 서비스](https://javafa.gitbooks.io/nodejs_server_basic/content/chapter11.html)

이벤트 Loop 기반의 비동기처리를 지원하기 때문에 대용량 파일을 구간별로 작게 나누어서 처리 하는 작업에 강점을 가지고 있음

@streaming/html/movie_player.html
혹시나 server의 절대경로를 지정하면  Not allowed to load local resource 에러
    
    <source src="C:\Naver Movie\나는내일,어제의너와만난다_NonDRM_[FHD].mp4" type="video/mp4">

    <h1>Movie Player</h1>
    <video width="320" height="240" controls>
        <source src="../movie/big.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>


@streaming/movie/big.mp4
최소 100mb이상의 동영상파일 준비할 것


@streaming/streaming_movie.js
stream을 이용하지 않는다면, 서버에서 파일을 다 읽은후에 쓰기작업함.(서비스 속도저하)

    var http = require('http');
    var url = require('url');
    var fs = require('fs');

    var server = http.createServer(function(request,response){

    var parsedUrl = url.parse(request.url);
    var resource = parsedUrl.pathname;
    console.log('resource='+resource);

    var resourcePath = '.'+resource;//현재 streamin_movie.js파일 기준 상대경로로 변경함.
    console.log('resourcePath='+resourcePath);

    // html 페이지 요청이 들어왔을 경우는 텍스트 파일 처리
    if(resource.indexOf('/html/') == 0){
        
        fs.readFile(resourcePath, 'utf-8', function(error, data) {
        
            if(error){
            response.writeHead(500, {'Content-Type':'text/html'});
            response.end('500 Internal Server : '+error);
        }
        else{
            response.writeHead(200, {'Content-Type':'text/html'});
            response.end(data);
        }

        });

    }else if(resource.indexOf('/movie/') == 0){
        //stream을 이용하지 않는다면, 서버에서 파일을 다 읽은후에 쓰기작업함.(서비스 속도저하)
        fs.readFile(resourcePath, function(error, data) {
             response.end(data);
        });

    }
    else{

        response.writeHead(404, {'Content-Type':'text/html'});
        response.end('404 Page Not Found');
    }

    });

    server.listen(80, function(){
        console.log('Server is running...@127.0.0.1:80');
    });


스트림이용. fs모듈의 createReadStream메소드 이용
다음 이벤트핸들러 연결
* data
* end
* error 

    // 1. stream 생성
    var stream = fs.createReadStream(resourcePath);
    // 2. 잘게 쪼개진 stream 이 몇번 전송되는지 확인하기 위한 count
    var count = 0;
    // 3. 잘게 쪼개진 data를 전송할 수 있으면 data 이벤트 발생 
    stream.on('data', function(data) {
    count = count + 1;
    console.log('data count='+count);
    // 3.1. data 이벤트가 발생되면 해당 data를 클라이언트로 전송
    response.write(data);
    });

    // 4. 데이터 전송이 완료되면 end 이벤트 발생
    stream.on('end', function () {
    console.log('end streaming');
    // 4.1. 클라이언트에 전송완료를 알림
    response.end();
    });

    // 5. 스트림도중 에러 발생시 error 이벤트 발생
    stream.on('error', function(err) {
    console.log(err);
    // 5.2. 클라이언트로 에러메시지를 전달하고 전송완료
    response.end('500 Internal Server : '+err);
    });