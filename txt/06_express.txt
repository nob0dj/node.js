# express모듈
http모듈처럼 사용하지만 훨씬 더 많은 기능을 가지고 있는 외부모듈

## 설치
수업당시 안정화된 버젼의 express를 찾아 설치할것.
npm install express@4.16.3 => 4.16.3버젼설치
npm install express@4.16 => 4.16.x 버젼중에 최신버젼 설치
npm install express@4 => 4.x.x버젼중에 최신버젼 설치


## 맛보기

@11_node.express.module/01_node.express.js
설치된 supervisor를 이용하여, 실시간 업데이트가 가능한 상태로 테스트한다.

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // request 이벤트 리스너를 설정합니다.
    app.use((request, response) => {
    response.writeHead(200, { 'Content-Type': 'text/html' });
    response.end('<h1>Hello express</h1>');
    }).listen(52273, ()=> {
    console.log("Server Running at http://127.0.0.1:52273");
    });

두번째방법
socket.io모듈등 다른 모듈과 함께 사용할때는 아래와 같은 방법 이용

    //2번째 방법
    //http모듈의 createServer메소드의 매개인자로 express모듈 전달
    var http = require('http');
    app.use((request, response) => {
        response.writeHead(200, { 'Content-Type': 'text/html' });
        response.end('<h1>Hello express</h1>');
    })
    http.createServer(app).listen(52273, ()=> {
        console.log("Server Running at http://127.0.0.1:52273");
    });


## 확장된 request, response객체


### 1. response
[https://expressjs.com/en/api.html#req](https://expressjs.com/en/api.html#req)


* send([body]) : 매개변수에 따라 html/json으로 응답
    * 문자열 => html
    * 배열, 객체 => json
* json([body]) : json으로 응답
* jsonp([body]) : jsonp로 응답
* redirect([status,] path) : 웹페이지경로 강제이동


배열타입으로 데이터 전송시 자동으로 json문자열로 전송됨.
[크롬확장프로그램 json formatter설치](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa/related)

@11_node.express.module/02_node.express.response.js

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // request 이벤트 리스너를 설정합니다.
    app.use(function (request, response) {
    // 데이터를 생성합니다.
    var output = [];
    for (var i = 0; i < 3; i++) {
        output.push({
        count: i,
        name: 'name - ' + i
        });
    }

    // 응답합니다 : output이 배열이므로, json타입으로 전송
    response.send(output);
    });

    // 서버를 실행합니다.
    app.listen(52273, function () {
    console.log('Server running at http://127.0.0.1:52273');
    });

상태코드와 함께 전달하기
send메소드는 두번이상 실행될 수 없는듯. supervisor로 실행시 계속 에러남.

    response.staus(404).send('<h1>NotFoundError</h1>');

상태코드만 전달할 경우에는 sendStatus()메소드 사용
* `res.sendStatus(200);` // equivalent to res.status(200).send('OK')
* `res.sendStatus(403);` // equivalent to res.status(403).send('Forbidden')
* `res.sendStatus(404);` // equivalent to res.status(404).send('Not Found')
* `res.sendStatus(500);` // equivalent to res.status(500).send('Internal Server Error')

    response.sendStatus(404);

### 2. request
[https://expressjs.com/en/api.html#res](https://expressjs.com/en/api.html#res)


@11_node.express.module/03_node.express.request.js
request.header속성은 http모듈의 request속성에도 있다.

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    app.use((request, response) => {
    // User-Agent 속성을 추출합니다.
    var agent = request.header('User-Agent');

    // 브라우저를 구분합니다.
    if (agent.toLowerCase().match(/chrome/)) {
        // 페이지를 출력합니다.
        response.send('<h1>Hello Chrome .. !</h1>');
    } else {
        // 페이지를 출력합니다.
        response.send('<h1>Hello express .. !</h1>');
    }
    });

    // 서버를 실행합니다.
    app.listen(52273, function () {
    console.log('Server running at http://127.0.0.1:52273');
    });



파라미터접근
요청 url : http://localhost:52273/?name=김현&region=강원도영월

@11_node.express.module/04_node.express.parameter.js

기존 http모듈,url모듈을 이용한 parsing보다 훨씬 간단하다.
`url.parse(req.url, true).query.name`=>으웩

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    app.use((request, response) => {
    // 변수를 선언합니다.
    var name = request.query.name;
    var region = request.query.region;

    // 응답합니다.
    response.send('<h1>' + name + '-' + region + '</h1>');
    });

    // 서버를 실행합니다.
    app.listen(52273, () =>  {
    console.log('Server running at http://127.0.0.1:52273');
    });


## 미들웨어
express모듈은 use메소드를 여러번 사용할 수 있고, 매개변수로 `function(request, response, next){}`형태의 콜백함수를 전달함.
요청응답을 완료하기 까지 여러 use메소드를 사용한 업무처리가 가능함.
이때 use메소드의 매개변수로 전달되는 콜백함수를 **Middleware**라고 함.

미들웨어 테스트

@11_node.express.module/05_node.express.middleware/01_mw.js

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어 설정(1)
    app.use((request, response, next)=>{
    console.log("첫 번째 미들웨어");
    next();
    });

    // 미들웨어 설정(2)
    app.use((request, response, next)=>{
    console.log("두 번째 미들웨어");
    next();
    });

    // 미들웨어 설정(3)
    app.use((request, response, next)=>{
    console.log("세 번째 미들웨어");
    // 응답합니다.
    response.writeHead(200, { 'Content-Type': 'text/html' });
    response.end('<h1>express Basic</h1>');
    });

    // 서버를 실행합니다.
    app.listen(52273, () => {
    console.log('Server running at http://127.0.0.1:52273');
    });

미들웨어별 처리 테스트
하나의 use메소드에서 처리하지 않고, 모듈별로 나뉘어진 미들웨어를 사용하는 이유는 업무의 관심사별로 모듈을 나누고, 재사용하기 위함이다.

    // 미들웨어 설정(1)
    app.use((request, response, next)=>{
    console.log("첫 번째 미들웨어");
    //데이터추가
    request.number = 9999;
    next();
    });

    // 미들웨어 설정(2)
    app.use((request, response, next)=>{
    console.log("두 번째 미들웨어");
    //데이터추가
    response.name = '김동현';
    next();
    });

    // 미들웨어 설정(3)
    app.use((request, response, next)=>{
    console.log("세 번째 미들웨어");
    // 응답합니다.
    response.send('<h1>'+request.number+', '+response.name+'</h1>')

    });

[expressjs에서 제공되는 middleware목록](https://expressjs.com/en/resources/middleware.html)
* router : 페이지라우팅
* static : 특정폴더를 서버의 루트폴더에 올림.
* morgan : 로그관련
* cookie parser : 쿠키관련
* body parser : post요청 매개변수 추출
* connect-multiparty : post요청 매개변수추출
* express-session : 세션관련 처리
* csurf : csrf 보안수행
* error handler : 예외처리
* limit : post용청 데이터제한
* vhost : 가상호스트 설정


## 1. router
express에 내장된 미들웨어

요청메소드별로 준비된 함수
* get(path, callback[, callback]) : get 요청에 대한 이벤트리스너 지정
* post(path, callback[, callback]) : post 요청에 대한 이벤트리스너 지정
* put(path, callback[, callback]) : put 요청에 대한 이벤트리스너 지정
* delete(path, callback[, callback]) : delete 요청에 대한 이벤트리스너 지정
* all(path, callback[, callback]) : 모든 요청에 대한 이벤트 리스너지정


@11_node.express.module/05_node.express.middleware/02_router/01_mw.router.js

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // 라우터를 설정합니다.
    app.get('/a', function (request, response) {
    response.send('<a href="/b">Go to B</a>');
    });
    app.get('/b', function (request, response) {
    response.send('<a href="/a">Go to A</a>');
    });

    // 서버를 실행합니다.
    app.listen(52273, function () {
    console.log('Server running at http://127.0.0.1:52273');
    });


routing 매개변수 활용하기
@11_node.express.module/05_node.express.middleware/02_router/02_mw.router.params.js

params속성과 query속성을 헷갈리지 말자
* params : /:pnum 처럼 :기호를 사용하는 라우팅매개변수
* query : ?name=A 같은 요청매개변수

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // 라우터를 설정합니다.
    // routing parameter사용 => :pnum
    app.get('/page/:pnum', (request, response) => {
    // 변수를 선언합니다.
    var pnum = request.params.pnum;

    // 응답합니다.
    response.send('<h1>' + pnum + ' Page</h1>');
    });

    // 서버를 실행합니다.
    app.listen(52273, () => {
    console.log('Server running at http://127.0.0.1:52273');
    });


전체선택자의 사용
@11_node.express.module/05_node.express.middleware/02_router/03_mw.router.all.js

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // 라우터를 설정합니다.
    var f = (request, response) => {
        response.send('<h1>Index Page</h1>');
    };
    app.get('/', f).get('/index', f)

    //작성된 router메소드들이 순서대로 처리도므로, 전체선택자 *의 경우, 가장 마지막에 작성해야함.
    app.all('*', (request, response) => {
    response.status(404).send('<h1>ERROR - Page Not Found</h1>');
    });

    // 서버를 실행합니다.
    app.listen(52273, () => {
    console.log('Server running at http://127.0.0.1:52273');
    });


**router모듈화**
프로젝트 진행시 패키지 별로 라우팅을 모듈화 해서 관리할 수 있다
(모던웹을 위한 node.js 프로그래밍 p.199 참조)



## 2.static
특정폴더를 웹서버루트디렉토리에 등록해준다. img, css, js파일등 static자원을 등록가능하다.

현재 등록된 public/img/hyunta.jpg가 같은 경로에 위치하고 있다.

@11_node.express.module/05_node.express.middleware/03_static/app.js

    // 모듈을 추출합니다.
    var express = require('express');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    app.use(express.static(__dirname + '/public'));
    app.use((request, response) => {
    // 응답합니다.
    response.writeHead(200, { 'Content-Type': 'text/html' });
    response.end('<img src="/img/hyunta.jpg" width="100%" />');
    });

    // 서버를 실행합니다.
    app.listen(52273, () =>  {
    console.log('Server running at http://127.0.0.1:52273');
    });

## 3. morgan
로그관련 미들웨어로써 별도의 설치가 필요하다.
`npm install morgan`

[morgan tokens](https://expressjs.com/en/resources/middleware/morgan.html#tokens)
[morgan options : 준비된 토큰모음](https://expressjs.com/en/resources/middleware/morgan.html#options)

tokens
* :req[header]
* :res[header]
* http-version
* response-time
* remote-addr : 원격주소 => ::1 (이게 모임?)
* date[format]
* method
* url
* referrer
* User-Agent
* status

options 
* combined
* common
* dev
* short
* tiny

@11_node.express.module/05_node.express.middleware/04_morgan/01_morgan.js

    // 모듈을 추출합니다.
    var express = require('express');
    var morgan = require('morgan');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    //1. option지정
    // app.use(morgan('combined'));
    // app.use(morgan('tiny'));
    app.use(morgan('dev'));

    //2.직접 토큰 지정
    app.use(morgan(':req[User-Agent] + :method + :date'));

    app.use(function (request, response) {
    response.send('<h1>express Basic</h1>');
    });

    // 서버를 실행합니다.
    app.listen(52273, function () {
    console.log('Server running at http://127.0.0.1:52273');
    });

## 5.cookie-parser
[cookie-parser api](https://expressjs.com/en/resources/middleware/cookie-parser.html)

cookie-parser설치
`npm install cookie-parser`


http모듈에서 헤더 Set-Cookie의 값으로 문자열로 전해주던 번거로움을 덜수 있다.

    //cookie설정
    res.writeHead(200, {
        'Content-Type':'text/html',
        'Set-Cookie':[
            'breakfast=toast;Expires='+d.toUTCString(),//Tue, 07 Aug 2018 15:52:12 GMT => UTC timezone의 시각반납
            'dinner=chicken'
        ]
    });

@11_node.express.module/05_node.express.middleware/05_cookie-parser/01_mw.cooieParser.js

    // 모듈을 추출합니다.
    var express = require('express');
    var cookieParser = require('cookie-parser');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    app.use(cookieParser());

    // 라우터를 설정합니다.
    app.get('/getCookie', (request, response) => {
        // 응답합니다.
        response.send(request.cookies);

        //사용자 요청에 담긴 쿠키속성 개별 접근
        console.log(request.cookies.str);
    });
    app.get('/setCookie', (request, response) => {
        // 쿠키를 생성합니다.
        response.cookie('str', 'cookie');
        response.cookie('myobj', {
            name: 'cookie',
            property: 'delicious'
        });
        // /getCookie페이지로 리다이렉트
        response.redirect('/getCookie');
    });

    // 서버를 실행합니다.
    app.listen(52273, () =>  {
    console.log('Server running at http://127.0.0.1:52273');
    });


세번째 인자로 쿠키관련 옵션객체를 전달함
* httpOnly : javascript를 통한 cookie객체 접근 금지.
* secure : https에서만 쿠키전송
* expires
* maxAge
* path

    response.cookie('str', 'cookie', {
        //   maxAge: 6000,//milisecon값으로 지정
        expires : new Date(Date.now()+90000),//15분 후에 페기
        httpOnly : true,//javascript를 통한 cookie객체 접근 방지
        secure : true //https환경에서만 서버로 전송
    });    

날짜 정보 확인

  console.log(new Date().getTime());//unix타입리턴 : 1536625086942
  console.log(new Date());///2018-09-11T00:18:06.953Z
  console.log(new Date(Date.now()));//2018-09-11T00:18:06.957Z


## 6.body-parser
설치
`npm install body-parser`

request의 body속성에 전송된 parameter값이 담긴다.

주의할것.
body-parser미들웨어는 `application/x-www-form-urlencoded`인코딩방식만 지원함
`multipart/form-data`인코딩방식은 multiparty미들웨어를 이용해야함.

[body-parser api](http://expressjs.com/en/resources/middleware/body-parser.html)

미들웨어 추가시 
    app.use(bodyParser());//deprecated => json/urlencoded메소드를 사용할 것.
    app.use(bodyParser.urlencoded());//body-parser deprecated undefined extended: provide extended option 
    app.use(bodyParser.urlencoded({extended:false}));

urlencoded메소드의 options
* extended : 중첩된 객체(nested object)사용여부
    * true : qs라이브러리 사용. 어떤 타입이든 가능.
    * false : querystring라이브러리 사용. string, array타입
[body-parser 모듈 : urlencoded()의 옵션](http://sjh836.tistory.com/154)


@11_node.express.module/05_node.express.middleware/06_body-parser/01_mw.bodyParser.js

    // 모듈을 추출합니다.
    var fs = require('fs');
    var express = require('express');
    var bodyParser = require('body-parser');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    app.use(bodyParser.urlencoded({ extended: false }));

    // 라우터를 설정합니다.
    //1. GET 방식 : url에 작성 http://127.0.0.1:52273/?name=김동현&age=20
    app.get('/', (request, response) => {
        var name = request.query.name;
        var age = request.query.age;

        var html = "<h2>GET : 전달된 매개변수</h2>";
        html += "<hr>";
        html += "<p>name="+name+"</p>";
        html += "<p>age="+age+"</p>";
        response.send(html);
    });

    //2.POST방식 : Postman 크롬확장프로그램 통해 요청. x-www-form-urlencoded인코딩 방식 선택할 것.
    app.post('/', (request, response) => {
        var name = request.body.name;
        var age = request.body.age;

        var html = "<h2>BODY : 전달된 매개변수</h2>";
        html += "<hr>";
        html += "<p>name="+name+"</p>";
        html += "<p>age="+age+"</p>";
        response.send(html);
    });

    // 서버를 실행합니다.
    app.listen(52273, function () {
    console.log('Server running at http://127.0.0.1:52273');
    });


## 7.connect-multiparty
파일전송에 사용되는 multipart/form-data인코딩방식을 지원하는 모듈
(body-parser는 application/x-www-form-urlencoded인코딩방식만 지원)

html파일에서 form전송시 인코딩방식 multipart/form-data 속성지정하면, 지정 업로드 폴더에 파일이 rename되어서 저장됨.

    app.use(multipart({ uploadDir: __dirname + '/upload' }));

@11_node.express.module/05_node.express.middleware/07_connect-multiparty/upload
폴더를 미리 만들어두어야 오류안남.

@11_node.express.module/05_node.express.middleware/07_connect-multiparty/fileUpload.html

    <!DOCTYPE html>
    <html>
    <head>
    <title>Multipart Upload</title>
    </head>
    <body>
    <h1>File Upload</h1>
    <form method="post" enctype="multipart/form-data">
        <table>
        <tr>
            <td>Comment: </td>
            <td><input type="text" name="comment" /></td>
        </tr>
        <tr>
            <td>File: </td>
            <td><input type="file" name="upFile" /></td>
        </tr>
        </table>
        <input type="submit" />
    </form>
    </body>
    </html>

@11_node.express.module/05_node.express.middleware/07_connect-multiparty/01_mw.connectMultiparty.js

    // 모듈을 추출합니다.
    var fs = require('fs');
    var express = require('express');
    var multipart = require('connect-multiparty');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    app.use(multipart({ uploadDir: __dirname + '/upload' }));

    // 라우터를 설정합니다.
    app.get('/', (request, response) => {
        fs.readFile('fileUpload.html', (error, data) => {
            response.send(data.toString());
        });
    });
    app.post('/', (request, response) => {
        console.log(request.body);//{ comment: 'ㅎㅎㅎ' }
        console.log(request.files);

        //파일 관련정보
        var imageFile = request.files.image
        console.log(imageFile.name);//originalFilename값 추출
        console.log(imageFile.path);//C:\\Users\\nobodj\\Dropbox\\Coding\\node.js\\11_node.express.module\\05_node.express.middleware\\07_connect-multiparty\\upload\\Z1JVx7Jl_ncdxP2WUJhCRsdX.png

        response.redirect("/");
    });

    /*
    request.files 객체출력 : 

    { upFile:
        { fieldName: 'upFile',
            originalFilename: 'hyunta.jpg',
            path: 'C:\\Users\\nobodj\\Dropbox\\Coding\\node.js\\11_node.express.module\\05_node.express.middleware\\07_connect-multiparty\\upload\\DrAkOeCaIztDzPC_Cgq72gNm.jpg',
            headers:
            { 'content-disposition': 'form-data; name="image"; filename="hyunta.jpg"',
                'content-type': 'image/jpeg' },
            size: 26357,
            name: 'hyunta.jpg',
            type: 'image/jpeg' } 
    }


    */

    // 서버를 실행합니다.
    app.listen(52273, () => {
    console.log('Server running at http://127.0.0.1:52273');
    });



파일이름을 변경(중복방지)
UUID(Uiniversally Unique Identifier)를 지원하는 모듈 node-uuid등이 있다.
[https://github.com/kelektiv/node-uuid](https://github.com/kelektiv/node-uuid)

    app.post('/', (request, response) => {
        // 변수를 선언합니다.
        var comment = request.body.comment;
        var imageFile = request.files.image;
        
        if (imageFile) {
            // 변수를 선언합니다.
            var name = imageFile.name;
            var path = imageFile.path;
            var type = imageFile.type;

            //console.log(__dirname);//루트디렉토리의 절대경로 반환

            // 이미지 파일 확인
            if (type.indexOf('image') != -1) {
                // 이미지 파일의 경우: 파일 이름을 변경합니다.
                var outputPath = __dirname + '/upload/' + Date.now() + '_' + name;
                fs.rename(path, outputPath, (error) => {
                response.redirect('/');
                });
            } else {
                // 이미지 파일이 아닌 경우: 파일을 제거합니다.
                fs.unlink(path, error => {
                response.sendStatus(400);
                });
            }
        } 
        else {
            // 파일이 없을 경우
            response.sendStatus(404);
        }
    });
    
만약, fileUpload.html에서 file태그의 multiple속성을 지정했다면, 해당fieldName에 파일배열이 지정되어 전송된다.

미들웨어를 특정라우팅에만 적용할 수 있다. cookie-parser, body-parser, morgan등의 미들웨어와 다르게 connect-multiparty 같은 파일업로드 미들웨어는 특정페이지에서만 적용되는 경우가 많기때문이다
지정한 특정라우팅진입시에만 multiparty 미들웨어가 수행되고, 사용자콜백함수가 적용된다.

    app.post('/', multipart({ uploadDir: __dirname + '/upload' }), (request, response) => {
        
    });



## 8.express-session
connect.sid라는 쿠키는 express-session 모듈이 지정한 세션키임.

cookie옵션객체지정
* name : 쿠키이름
* store : 쿠키저자오
* cookie : 생성할 cookie관련정보
* secret : 비밀키
* resave : 세션이 변경되지 않아도 세션 저장소에 저장할지 여부(true|false)
* saveUninitialized 초기화 되지 않은 세션을 세션 저장소에 저장할 지 설정(true|false)

미들웨어 설정시
secret, resave, saveUninitialized는 기본적으로 설정해줘야하는 옵션이다.
cookie-maxAge정보를 통해서 세션유효시간을 설정할 수 있다.(milisecond)

    app.use(session({
        secret: 'secret key',
        resave: false,
        saveUninitialized: true,
        cookie :{
            maxAge : 60*1000
        }
    }));


cookie옵션 기본값

    {
        "originalMaxAge": null,
        "expires": null,
        "httpOnly": true,
        "path": "/"
    }


최초접속시각을 세션에 담아두는 예제

@11_node.express.module/05_node.express.middleware/08_express-session/01.mw.expressSession.js
new Date()객체가 리턴하는 것은 UTC시각이다. 우리나라는 UTC+9이라 toLocaleString()을 호출해야한다.
(왜 자동으로 지역정보가 잡히지 않는거지ㅜ)

    // 모듈을 추출합니다.
    var express = require('express');
    var session = require('express-session');

    // 서버를 생성합니다.
    var app = express();

    // 미들웨어를 설정합니다.
    app.use(session({
        secret: 'secret key',
        resave: false,
        saveUninitialized: true,
        cookie :{
            maxAge : 60*1000
        }
    }));

    app.get('/', (request, response) => { 
        //최초접속시간을 session에 저장함.
        var start = request.session.start;
        if(!start) start = request.session.start = new Date().toLocaleString();
        console.log(start);

        response.send(request.session);
    });

    app.get('/a', (request, response) => {
        //최초접속시간을 session에 저장함.
        var start = request.session.start;
        if(!start) start = request.session.start = new Date().toLocaleString();
        console.log(start);

        response.send(request.session);
    });


    // 서버를 실행합니다.
    app.listen(52273, () => {
    console.log('Server running at http://127.0.0.1:52273');
    });


세션제거

    //세션제거
    app.get('/destroy', (request, response) => {

        request.session.destroy();
        response.redirect("/");

    });





## loginCheck 
@11/node.express.module/loginCheck

nodejs의 this는 브라우져의 window객체가 아닌 module.exports객체이다.
객체 안에서 객체필드를 호출하기 위해서는 `변수.필드명`으로 접근한다.


@DummyDB.js

@loginApp.js

@index.jade

@login.html



